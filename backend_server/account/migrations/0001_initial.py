# Generated by Django 4.2 on 2025-01-27 08:51
# Generated by Django 4.2 on 2025-01-27 08:51

from django.conf import settings
from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Is admin')),
                ('is_client', models.BooleanField(default=False, verbose_name='Is client')),
                ('is_moderator', models.BooleanField(default=False, verbose_name='Is moderator')),
                ('username', models.CharField(max_length=150, unique=True, verbose_name='Email')),
                ('nom_entreprise', models.CharField(default='entreprise', max_length=150, verbose_name='Nom Entreprise')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=250)),
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=250)),
                ('title', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('pending', 'En cours'), ('approved', 'Livrée')], default='pending', max_length=10, verbose_name='Status')),
                ('status', models.CharField(choices=[('pending', 'En cours'), ('approved', 'Livrée')], default='pending', max_length=10, verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Rapport',
                'verbose_name_plural': 'Liste des Rapports',
            },
        ),
        migrations.CreateModel(
            name='ReportFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='reports_pdf/')),
                ('original_name', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('report_related', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='account.report')),
            ],
            options={
                'verbose_name': 'Fichier de Rapport',
                'verbose_name_plural': 'Liste des Fichiers des Rapports',
                'ordering': ['-created_at'],
                'verbose_name': 'Rapport',
                'verbose_name_plural': 'Liste des Rapports',
            },
        ),
        migrations.CreateModel(
            name='ReportFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='reports_pdf/')),
                ('original_name', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('report_related', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='account.report')),
            ],
            options={
                'verbose_name': 'Fichier de Rapport',
                'verbose_name_plural': 'Liste des Fichiers des Rapports',
                'ordering': ['-created_at'],
            },
        ),
    ]
